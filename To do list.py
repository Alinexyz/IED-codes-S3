import os # Importa o m√≥dulo "os" para verificar a exist√™ncia de arquivos no sistema

tarefas = []            # Lista principal de tarefas (espa√ßo para armazenar as tarefas)
historico = []          # Pilha para desfazer tarefas (onde elas ir√£o ser armazazenadas)
fila_execucao = []      # Fila para executar tarefas (a ordem em que as tarefas ser√£o mostradas)
ARQUIVO = "tarefas.txt" # Nome do arquivo onde as tarefas ser√£o salvas e carregadas

def salvar_em_arquivo():     # Salva todas as tarefas da lista 'tarefas' no arquivo .txt
    with open(ARQUIVO, "w") as f:   # Abre o arquivo no modo escrita ("w"), apagando o conte√∫do anterior
        for t in tarefas:   # Percorre cada tarefa
            linha = f"{t['titulo']}|{t['prioridade']}|{t['data']}\n"    # Monta uma linha com os dados da tarefa
            f.write(linha)  # Escreve a linha no arquivo

def carregar_do_arquivo():      # Carrega tarefas do arquivo para a lista e fila
    if os.path.exists(ARQUIVO): # Verifica se o arquivo existe
        with open(ARQUIVO, "ler") as f:    # Abre o arquivo no modo leitura ("ler")
            for linha in f: # L√™ o arquivo linha por linha
                partes = linha.strip().split("|")    # Remove espa√ßos/quebra de linha e separa os dados
                if len(partes) == 3:     # Garante que h√° 3 partes: t√≠tulo, prioridade e data
                    tarefa = {"titulo": partes[0], "prioridade": partes[1], "data": partes[2]}   # Cria a tarefa
                    tarefas.append(tarefa)  # Adiciona √† lista principal
                    fila_execucao.append(tarefa)     # Adiciona √† fila de execu√ß√£o


def adicionar_tarefa(titulo, prioridade, data): # Cria uma tarefa com t√≠tulo, prioridade e data
    tarefa = {
        "titulo": titulo, # T√≠tulo da tarefa
        "prioridade": prioridade,  # Prioridade da tarefa (Alta, M√©dia, Baixa)
        "data": data # Data de vencimento da tarefa
    }
    tarefas.append(tarefa)   # Adiciona a tarefa √† lista principal
    tarefas.append(tarefa)  # Adiciona a tarefa ao hist√≥rico (para desfazer)
    historico.append(tarefa)    # Adiciona a tarefa √† fila de execu√ß√£o
    fila_execucao.append(tarefa)    # Adiciona a tarefa √† fila de execu√ß√£o
    salvar_em_arquivo()    # Salva as altera√ß√µes no arquivo
    print(f"Tarefa '{titulo}' adicionada com prioridade {prioridade} e data {data}!\n")  # Confirma√ß√£o ao usu√°rio

def desfazer_ultima_tarefa():   # Fun√ß√£o para desfazer a √∫ltima tarefa adicionada
    if historico:   # Verifica se h√° alguma tarefa no hist√≥rico
        ultima = historico.pop()    # Remove a √∫ltima tarefa adicionada ao hist√≥rico (estilo pilha)
        tarefas.remove(ultima)  # Remove essa tarefa da lista principal
        fila_execucao.remove(ultima)    # Remove essa tarefa da fila de execu√ß√£o
        salvar_em_arquivo() # Atualiza o arquivo
        print(f"Tarefa '{ultima}' desfeita!\n")  # Informa que a tarefa foi desfeita
    else:
        print("Nenhuma tarefa para desfazer.\n")

def atender_tarefa():   # Fun√ß√£o para atender a tarefa (remo√ß√£o da fila de execu√ß√£o)
    if fila_execucao:   # Se o hist√≥rico estiver vazio
        feita = fila_execucao.pop(0)    # Remove a primeira tarefa da fila (modo FIFO)
        tarefas.remove(feita)    # Remove a tarefa da lista principal
        salvar_em_arquivo() # Atualiza o arquivo
        print(f"Tarefa '{feita}' atendida!\n")  # Informa qual tarefa foi atendida
    else:
        print("Nenhuma tarefa para atender.\n") # Se a fila estiver vazia

def mostrar_tarefas():  # Fun√ß√£o para mostrar todas as tarefas
    print("\nüìã Lista de Tarefas:") # T√≠tulo da listagem
    if not tarefas: # Se a lista de tarefas estiver vazia
        print("Nenhuma tarefa cadastrada.\n")     # Informa que n√£o h√° tarefas
    else:
        for i, t in enumerate(tarefas):  # Percorre todas as tarefas com √≠ndice
            print(f"{i + 1}. Tarefa: {t['titulo']}, Prioridade: {t['prioridade']}, Data: {t['data']}")  # Mostra os dados de cada tarefa
    print() # Linha em branco para melhorar a leitura

carregar_do_arquivo()   # Carrega tarefas do arquivo no in√≠cio

while True:  # La√ßo principal que mant√©m o programa rodando at√© que o usu√°rio escolha sair
    print("1. Adicionar Tarefa")  # Mostra a op√ß√£o 1 no menu
    print("2. Desfazer √öltima Tarefa")  # Mostra a op√ß√£o 2 no menu
    print("3. Atender Tarefa (modo fila)")  # Mostra a op√ß√£o 3 no menu
    print("4. Mostrar Tarefas")  # Mostra a op√ß√£o 4 no menu
    print("5. Sair")  # Mostra a op√ß√£o 5 no menu


    opcao = input("Escolha uma op√ß√£o: ")    # L√™ a op√ß√£o escolhida pelo usu√°rio

    if opcao == '1':  # Se a op√ß√£o for 1, adiciona uma nova tarefa
        titulo = input("Digite o t√≠tulo da tarefa: ")  # L√™ o t√≠tulo da tarefa
        prioridade = input("Prioridade (Alta, M√©dia, Baixa): ")  # L√™ a prioridade
        data = input("Data de vencimento (DD/MM/AAAA): ")  # L√™ a data de vencimento
        adicionar_tarefa(titulo, prioridade, data)  # Chama a fun√ß√£o para adicionar a tarefa
    elif opcao == '2':  # Se a op√ß√£o for 2, desfaz a √∫ltima tarefa
        desfazer_ultima_tarefa()  # Chama a fun√ß√£o de desfazer
    elif opcao == '3':  # Se a op√ß√£o for 3, atende (remove) a pr√≥xima tarefa da fila
        atender_tarefa()  # Chama a fun√ß√£o de atender tarefa
    elif opcao == '4':  # Se a op√ß√£o for 4, mostra todas as tarefas
        mostrar_tarefas()  # Chama a fun√ß√£o de mostrar tarefas
    elif opcao == '5':  # Se a op√ß√£o for 5, sai do programa
        print("Saindo do programa...")  # Informa que o programa vai encerrar
        break  # Interrompe o la√ßo infinito e encerra o programa
    else:  # Se a op√ß√£o n√£o for v√°lida (n√£o est√° entre 1 e 5)
        print("Op√ß√£o inv√°lida!\n")  # Informa que a op√ß√£o √© inv√°lida